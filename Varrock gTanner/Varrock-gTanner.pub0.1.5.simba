program Varrock_gTanner;
{$DEFINE SMART}
{$DEFINE CRASHSMART}
{$I SRL/SRL.simba}
{$I SPS/SPS.simba}
{$I SRL/SRL/Misc/PaintSmart.simba}

{

 *** Geo's Varrock Tanner ***

  Description:
    - Tans all kind of hide at the shop in the West of Varrock.

  How To run:
    - Make sure SPS & SRL are fully updated.
    - Fill in the item the player is making.
      - Strings[0] ['ITEM_LEATHER', 'ITEM_HARDLEATHER', 'ITEM_SNAKESKIN_ONE',
                    'ITEM_SNAKESKIN_TWO', 'ITEM_GD_LEATHER', 'ITEM_BD_LEATHER',
                    'ITEM_RD_LEATHER', 'ITEM_BLD_LEATHER'];
      - Loc ['Bank', 'Tanner'];
    - Start in the bank with nothing in the invernTory and click run.
    - Babysit for a couple loads To make sure everything is working correctly.
    - If you find any bugs post on the thread
      - Link:

}

Procedure DeclarePlayers;
Begin
  HowManyPlayers    := 3;                    //How many players in the script.
  CurrentPlayer     := 0;                    //Current player in the Players array.
  NumberOfPlayers(HowManyPlayers);           //Don't change.

  with Players[0] Do
  Begin
    Name          := '';        //Player Username
    Pass          := '';  //Player Password
    Active        := False;                  //Active?
    Pin           := '';                //Bank Pin
    Loc           := 'Bank';                //'Bank' or 'Tanner'
    Strings[0]    := 'ITEM_HARDLEATHER';     //What are you making?
    Strings[1]    := 'LOC_AK';                    //AK or V
    Booleans[0]   := True;                  //Is this char a members? True = Yes; False = No
    //DO NOT CHANGE
    Integers[0]   := 0;                      //Coins '0' = False; '1' = True
    Integers[1]   := 0;                      //Hide  '0' = False; '1' = True
  End;

 {with Players[1] Do
  Begin
    Name          := '';                     //Player Username
    Pass          := '';                     //Player Password
    Active        := True;                   //Active?
    Pin           := '';                     //Bank Pin
    Loc           := 'Bank';                 //'Bank' or 'Tanner'
    Strings[0]    := 'ITEM_';         //What are you making?
    Booleans[0]   := False;                  //Is this char a members? True = Yes; False = No
    //DO NOT CHANGE
    Integers[0]   := 0;                      //Coins '0' = False; '1' = True
    Integers[1]   := 0;                      //Hide  '0' = False; '1' = True
  End;

  with Players[2] Do
  Begin
    Name          := '';                     //Player Username
    Pass          := '';                     //Player Password
    Active        := True;                   //Active?
    Pin           := '';                     //Bank Pin
    Loc           := 'Bank';                 //'Bank' or 'Tanner'
    Strings[0]    := 'ITEM_';         //What are you making?
    Booleans[0]   := False;                  //Is this char a members? True = Yes; False = No
    //DO NOT CHANGE
    Integers[0]   := 0;                      //Coins '0' = False; '1' = True
    Integers[1]   := 0;                      //Hide  '0' = False; '1' = True
  End; }
End;

const
  SRLStats_Username = '';// Your SRL Stats Username
  SRLStats_Password = ''; // Your SRL Stats Password
  // SRL Stats (SignUp: http://stats.villavu.com/register)
  Debug = True;      //Show script debug?
  PaintDebug = True; //Show visual debug of what the script is looking for?
  Switch = True;     //Switch Players after SwitchA time?
  SwitchA = 32;      //Time in minutes before switching player

type
  TPlace = record
    PathName : String;
    pts, vpts : TPointArray;
    Dist : Integer;
    BoxCol : TColor;
  End;

type
  TItem = record
    BoxCoords, xx, yy, Col, Tol : TIntegerArray;
    Name, sName, Orig, STATS_NAME : String;
    UpText : TStringArray;
  End;

type
  TLoc = record
    Col, Tol, W, H : TIntegerArray;
    Hue, Sat : Array of Extended;
    Option : String;
    UpText : Array of TStringArray;
End;

Var
  t, TR, TD, GTr, GFT, GCT,
  CT, STATS_BNK, STATS_TND,
  TimesSwitched, TimesBanked,
  SwitchAConvert, HideTanned,
  T2ClearDebug, Cur_Tan : Integer;
  MBX, MIX, MMX : TIntegerArray;
  WTA : TPlace;
  Item : TItem;
  pLoc : TLoc;
  WalkVar : TStringArray;
  SubPoints: array[0..4] of TDTMPointDef;
  MainPoint : TDTMPointDef;
  MasterTDTM: TDTM;
  WhichAngle : ExtEnded;

//******************************************************************************
//  Put Script runtime and Current Players name next To debug.
//******************************************************************************
Function gDebug(text : String) : String;
Begin
If (Debug) Then
  Result := '[ ' + MsToTime(TimeFromMark(TR), TIME_BARE) + ' ]::[ ' + Players[CurrentPlayer].Name + ' ] :: ' + text;
  Writeln(Result);
End;

//******************************************************************************
//  Setup the tanning locations needed within the script.
//******************************************************************************
Procedure SetupLocation(Loc : String);
Begin
  Case Loc of
    'LOC_V':
    With pLoc do
    Begin
    //[ 'Bank', 'Tanner']
      Col := [5202537, 14661340];
      Hue := [0.28, 0.19];
      Sat := [0.88, 2.00];
      Tol := [3, 18];
      H := [10, 17];
      W := [10, 32];
      Option := 'rade Tanner'; //tanner only
      UpText := [TStringArray(['ank', 'ank Booth']), TStringArray(['alk-to', 'anner'])];
    End;

    'LOC_AK':
    With pLoc do
    Begin
    //[ 'Bank', 'Tanner']
      Col := [11124695, 3693205];
      Hue := [0.07, 0.01];
      Sat := [1.27, 0.39];
      Tol := [6, 18];
      H := [1, 20];
      W := [1, 10];
      Option := 'an hides'; //tanner only
      UpText := [TStringArray(['ank', 'ank Booth']), TStringArray(['alk to', 'llis'])];
    End;
  End;
End;


//******************************************************************************
//  Setup the walking locations needed within the script.
//******************************************************************************
Procedure SetupWalking(Place : String);
Begin
  Case Place Of
    'PLACE_BANK_V':
      With WTA Do
      Begin
        PathName := 'Varrock  Bank';
        pts := [Point(4560, 3005), Point(4560, 2980), Point(4560, 2965), Point(4560, 2935), Point(4575, 2915)];
        vpts := [Point(4580, 2875), Point(4590, 2875), Point(4585, 2865)];
        Dist := 58;
        BoxCol := clBlue;
      End;

    'PLACE_TANNER_V':
      with WTA Do
      Begin
        PathName := 'Varrock Tanner';
        pts := [Point(4560, 2935), Point(4560, 2955), Point(4560, 2980), Point(4560, 3005), Point(4585, 3020)];
        vpts := [Point(4635, 3035), Point(4640, 3030), Point(4640, 3040)];
        Dist := 70;
        BoxCol := clYellow
      End;

    'PLACE_TANNER_AK':
      with WTA Do
      Begin
        PathName := 'Al Kharid Tanner';
        pts := [Point(4695, 2751), Point(4695, 2723), Point(4679, 2739)];
        vpts := [Point(4551, 2899), Point(4679, 2759), Point(4643, 2759)];
        Dist := 60;
        BoxCol := clRed;
      End;

     'PLACE_BANK_AK':
      with WTA Do
      Begin
        PathName := 'Al Kharid Bank';
        pts := [Point(4623, 3095), Point(4667, 2751)];
        vpts := [Point(4703, 2747), Point(4703, 2727), Point(4699, 2747)];
        Dist := 60;
        BoxCol := clLime;
      End;
  End;
End;

//******************************************************************************
//  Setup the item needed within the script
//******************************************************************************
Procedure SetupItem(Name : String);
Begin
  Case Name Of

    'ITEM_COWHIDE':
      with Item Do
      Begin
        sName := 'ITEM_COWHIDE';
        Name := 'Cowhide';
        xx := [26, 26, 20, 7, 0, 12];
        yy := [0, 8, 20, 20, 13, 8];
        Col := [11185074, 131072];
        Tol := [22, 0];
        UpText := ['Co', 'ow', 'ide', 'owr'];
      End;

    'ITEM_LEATHER':
      with Item Do
      Begin
        Orig := 'ITEM_COWHIDE';
        Name := 'Soft Leather';
        xx := [5, 14, 23, 28, 0, 14];
        yy := [13, 17, 14, 0, 4, 4];
        Col := [604220, 131072];
        Tol := [11, 0];
        BoxCoords := [74, 84, 108, 118];
        UpText := ['eat', 'eather', 'oft'];
        STATS_NAME := 'Soft Leather Tanned';
      End;

    'ITEM_HARDLEATHER':
      with Item Do
      Begin
        Orig := 'ITEM_COWHIDE';
        Name := 'Hard Leather';
        xx := [23, 23, 16, 7, 0, 15];
        yy := [0, 10, 22, 20, 11, 5];
        Col := [1713191, 131072];
        Tol := [1, 0];
        BoxCoords := [187, 86, 219, 115];
        UpText := ['eat', 'ard', 'eather'];
        STATS_NAME := 'Hard Leather Tanned';
      End;

    'ITEM_SNAKEHIDE_ONE':
      with Item Do
      Begin
        sName := 'ITEM_SNAKEHIDE_ONE';
        Name := 'Snakehide 1';
        xx := [15, 19, 24, 8, 0, 10];
        yy := [0, 7, 18, 11, 2, 6];
        Col := [1983556, 131072];
        Tol := [4, 0];
        UpText := ['nake', 'ide', 'ake'];
      End;

    'ITEM_SNAKEHIDE_TWO':
      with Item Do
      Begin
        sName := 'ITEM_SNAKEHIDE_TWO';
        Name := 'Snakehide 2';
        xx := [14, 24, 16, 8, 0, 11];
        yy := [0, 13, 20, 13, 5, 5];
        Col := [4542537, 131072];
        Tol := [4, 0];
        UpText := ['nake', 'ide', 'ake'];
      End;

    'ITEM_SNAKEKIN_ONE':
      with Item Do
      Begin
        Orig := 'ITEM_SNAKEHIDE_ONE';
        Name := 'Snakeskin 1';
        xx := [13, 20, 25, 11, 0, 11];
        yy := [0, 10, 21, 15, 4, 7];
        Col := [1780009, 131072];
        Tol := [2, 0];
        BoxCoords := [285, 91, 341, 129];
        UpText := ['nake', 'kin', 'ake'];
        STATS_NAME := 'Snake (Small) Tanned';
      End;

    'ITEM_SNAKESKIN_TWO':
      with Item Do
      Begin
        Orig := 'ITEM_SNAKEHIDE_TWO';
        Name := 'Snakeskin 2';
        xx := [13, 20, 25, 11, 0, 11];
        yy := [0, 10, 21, 15, 4, 7];
        Col := [1780009, 131072];
        Tol := [2, 0];
        BoxCoords := [396, 90, 453, 125];
        UpText := ['nake', 'kin', 'ake'];
        STATS_NAME := 'Snake (Large) Tanned';
      End;

    'ITEM_GD_HIDE':
      with Item Do
      Begin
        sName := 'ITEM_GD_HIDE';
        Name := 'Green Dragonhide';
        xx := [26, 25, 17, 6, 0, 13];
        yy := [0, 9, 19, 17, 6, 4];
        Col := [806155, 131072];
        Tol := [13, 0];
        UpText := ['ide', 'hide'];
      End;

    'ITEM_BD_HIDE':
      with Item Do
      Begin
        sName := 'ITEM_BD_HIDE';
        Name := 'Blue Dragonhide';
        xx := [25, 26, 20, 8, 0, 13];
        yy := [0, 10, 20, 20, 12, 7];
        Col := [9644309, 131072];
        Tol := [20, 0];
        UpText := ['ide', 'hide'];
      End;

    'ITEM_RD_HIDE':
      with Item Do
      Begin
        sName := 'ITEM_RD_HIDE';
        Name := 'Red Dragonhide';
        xx := [28, 27, 17, 7, 0, 16];
        yy := [0, 10, 20, 17, 9, 2];
        Col := [725071, 131072];
        Tol := [10, 0];
        UpText := ['ed', 'hide'];
      End;

    'ITEM_BLD_HIDE':
      with Item Do
      Begin
        sName := 'ITEM_BLD_HIDE';
        Name := 'Black Dragonhide';
        xx := [26, 22, 12, 2, 0, 13];
        yy := [0, 13, 18, 13, 6, 3];
        Col := [5263443, 131072];
        Tol := [9, 0];
        UpText := ['ide', 'hide'];
      End;

    'ITEM_GD_LEATHER':
      with Item Do
      Begin
        Orig := 'ITEM_GD_HIDE';
        Name := 'Green Leather';
        xx := [26, 26, 20, 6, 0, 12];
        yy := [0, 11, 20, 20, 9, 6];
        Col := [604424, 131072];
        Tol := [10, 0];
        BoxCoords := [72, 217, 108, 246];
        UpText := ['eat', 'eather'];
        STATS_NAME := 'Green Dragon Leather Tanned';
      End;

    'ITEM_BD_LEATHER':
      with Item Do
      Begin
        Orig := 'ITEM_BD_HIDE';
        Name := 'Blue Leather';
        xx := [27, 27, 17, 6, 0, 13];
        yy := [0, 13, 22, 19, 10, 9];
        Col := [4721674, 131072];
        Tol := [10, 0];
        BoxCoords := [186, 213, 219, 246];
        UpText := ['eat', 'eather'];
        STATS_NAME := 'Blue Dragon Leather Tanned';
      End;

    'ITEM_RD_LEATHER':
      with Item Do
      Begin
        Orig := 'ITEM_RD_HIDE';
        Name := 'Red Leather';
        xx := [0, 14, 27, 25, 6, 15];
        yy := [15, 25, 15, 1, 0, 10];
        Col := [527419, 131072];
        Tol := [7, 0];
        BoxCoords := [302, 214, 334, 246];
        UpText := ['eat', 'eather'];
        STATS_NAME := 'Red Dragon Leather Tanned';
      End;

    'ITEM_BLD_LEATHER':
      with Item Do
      Begin
        Orig := 'ITEM_BLD_HIDE';
        Name := 'Black Leather';
        xx := [25, 26, 21, 9, 0, 13];
        yy := [0, 9, 19, 21, 13, 9];
        Col := [1842206, 131072];
        Tol := [7, 0];
        BoxCoords := [409, 212, 445, 249];
        UpText := ['eat', 'eather'];
        STATS_NAME := 'Black Dragon Leather Tanned';
      End;
  End;
End;

//******************************************************************************
//  Sets the MainPoints & SubPoints for the DDTM.
//******************************************************************************
Procedure CreateDTM(ItemName : String);
Var
  i : Integer;
Begin
  MainPoint.x := Item.xx[5];
  MainPoint.y := Item.yy[5];
  MainPoint.areasize := 1;
  MainPoint.areashape := 0;
  MainPoint.color := Item.Col[0];
  MainPoint.Tolerance := Item.Tol[0];

  For i := 0 To 4 Do
  Begin
    SubPoints[i].x:= Item.xx[i];
    SubPoints[i].y:= Item.yy[i];
    SubPoints[i].areasize:=1;
    SubPoints[i].areashape:=0;
    SubPoints[i].color:=Item.Col[1];
    SubPoints[i].Tolerance:=Item.Tol[1];
  End;

  MasterTDTM.MainPoint := MainPoint;
  MasterTDTM.SubPoints := SubPoints;
End;

//******************************************************************************
//  Sets the time for switching players.
//******************************************************************************
Function SwitchTime : Boolean;
Var
  GST : Integer;
Begin
  Result := False;

  If (PlayersActive = 1) or (HowManyPlayers = 1) Then
  Begin
    Result := False;
    Exit;
  End;

  If (not (Switch)) Then
    Exit Else
  Begin
    GST := t + SwitchAConvert;
    GCT := GetSystemTime;
    GFT := GST - GCT;
  End;

  Result := GFT <= 0;

  if Result then
    Exit;
End;

//******************************************************************************
//  Switches To a world based on Booleans[0] in the player array
//******************************************************************************
Procedure SwitchWorld;
Var
  i : Integer;
Begin
  If LogOut Then
    LoginPlayerToLob;

  If LobbyScreen Then
  Begin
    If Not WorldScreen Then
      WaitFunc(@OpenWorldScreen, 250, 4500);
    If WorldScreen Then
    Begin
      For i := 0 to 5 do
      Begin
        if Not LoggedIn Then
          ChangeWorld(RandomWorld(Players[CurrentPlayer].Booleans[0], False)) else
        Exit;
      End;
    End;
  End;
End;

//******************************************************************************
//  After X(GFT) minutes the script will switch players for AntiBan purposes
//  NOTE: Can be set To False in the const field [ Switch ]
//******************************************************************************
Procedure SwitchPlayer;
Begin
  MarkTime(t);
  SwitchAConvert := SwitchA * 60000 + Random(300000);
  gDebug('Switching players.');
  CloseWindow;
  Logout;
  CurrentPlayer := NextPlayerIndex;
  SetupItem(Players[CurrentPlayer].Strings[0]);
  SetupItem(Item.Orig);
  SwitchWorld;
  gDebug('Logging in player: ' + Players[CurrentPlayer].Name);
  Inc(TimesSwitched);
  Exit;
End;

//******************************************************************************
//  In the event of a lost player, this will set theplayer To False and logout.
//******************************************************************************
Procedure EndPlayer(Why : string);
Begin
  gDebug('EndPlayer Activated');
  gDebug('Reason: ' + Why);
  Players[CurrentPlayer].Loc := Why;
  Players[CurrentPlayer].Active := False;
  CloseWindow;
  SwitchAConvert := SwitchA * 60000 + RandomRange(-300000, 300000);
  Logout;
  CurrentPlayer := NextPlayerIndex;

  If AllPlayersInactive Then
  Begin
    Writeln('AllPlayersInactive; Terminating...');
    Wait(1000);
    TerminateScript;
  End Else
  Begin
    SetupItem(Players[CurrentPlayer].Strings[0]);
    SetupItem(Item.Orig);
    SwitchWorld;
  End;
End;

//******************************************************************************
//  Clears the visual debug off the screen, keeps it tidy.
//******************************************************************************
Procedure ClearOSDebug;
Begin
  SMART_ClearCanvas;
End;

Function DeclareLoc : TStringArray;
Begin
  If Players[CurrentPlayer].Strings[1] = 'LOC_AK' then
    Result := ['PLACE_BANK_AK', 'PLACE_TANNER_AK'] else
  Result := ['PLACE_BANK_V', 'PLACE_TANNER_V'];
End;

//******************************************************************************
//  Main Screen TPA finding.
//******************************************************************************
Function TPAMainScreen(x, y, w, h, col, Tol: Integer; hue, sat: ExtEnded; upText: TStringArray; debug: String): Boolean;
Var
  CTS, i, j: Integer;
  BankBox : TBox;
  TPA: TPointArray;
  ATPA: T2DPointArray;
Begin
  If Not LoggedIn Then
    Exit;
  FindNormalRandoms;

  CTS := GetColorToleranceSpeed;
  ColorToleranceSpeed(3);
  FindColorsSpiralTolerance(MSCX, MSCY, TPA, col, MSX1, MSY1, MSX2, MSY2, Tol);
  ColorToleranceSpeed(CTS);
  ATPA := SplitTPAEx(TPA, h, w);


    gDebug('Attempting To find ' + debug);

  For i := 0 To High(ATPA) Do
  Begin

    gDebug('[' + ToStr(i) + '] TPA Length: ' + ToStr(Length(ATPA[i])));

    if Length(ATPA[i]) = 0 then
      Continue;

    If Not LoggedIn Then
      Exit;

    FindNormalRandoms;

    RAaSTPAEx(ATPA[i], 20, 10);
    MiddleTPAEx(ATPA[i], x, y);

    If (PaintDebug) Then
    Begin
      ClearOSDebug;
      For j := 0 to High(ATPA) do
      Begin
        BankBox := GetTPABounds(ATPA[j]);
        If j = i then
          SMART_DrawBoxEx(False, IntToBox(BankBox.x1-15, BankBox.y1+15, BankBox.x2+15, BankBox.y2-15), clLime) else
        SMART_DrawBoxEx(False, IntToBox(BankBox.x1-10, BankBox.y1+10, BankBox.x2+10, BankBox.y2-10), clRed)
      End;
    End;

    If Random(2)=1 then
      MMouse(x, y, -5, 5) else
    MissMouse(x, y);

    If(WaitUptextMulti(upText, 750)) Then
    Begin
      gDebug('Uptext: ' + GetUptext);
      Result := True;
      gDebug(debug + ' found');
      Exit;
    End;

    Wait(25+Random(125));

    If (i > High(ATPA[i])) Then
    Begin
      gDebug('TPAMainScreen: TimedOut');
      Result := False;
      Exit;
    End;

  End;
End;

//******************************************************************************
//  Check whether the Tanner Screen is open by counting the colors in the 'X'
//******************************************************************************
Function CheckTScreen : Boolean;
Begin
  Result := CountColor(2106925, 477, 30, 493, 46) = 6;
End;

//******************************************************************************
//  TPA finder for the Tanner.
//******************************************************************************
Function TPAFindTanner(x, y, w, h, col, Tol : Integer; hue, sat: ExtEnded; upText: TStringArray; debug: String): Boolean;
Var
  CTS, i: Integer;
  TPA: TPointArray;
  ATPA: T2DPointArray;
Begin
  If Not LoggedIn Then
    Exit;
  FindNormalRandoms;

  CTS := GetColorToleranceSpeed;
  ColorToleranceSpeed(2);
  SetColorSpeed2Modifiers(hue, sat);
  if FindColorsSpiralTolerance(MSCX, MSCY, TPA, col, MSX1, MSY1, MSX2, MSY2, Tol) then
  Begin
    SetColorSpeed2Modifiers(0.2, 0.2);
    ColorToleranceSpeed(CTS);
    If Random(2)=1 Then
      InvertTPA(TPA);
    ATPA := SplitTPAEx(TPA, w, h);

    gDebug('Attempting To find ' + debug);

    For i := 0 To High(ATPA) Do
    Begin
      If Not LoggedIn Then Exit;
      FindNormalRandoms;

      If Length(ATPA[i]) = 0 then
      Begin
        If Random(2)=1 then
          MissMouse(MSCX, MSCY) else
        MMouse(MSCX, MSCY, -2, 7);

        If WaitUpText('anner', 150) Then
        Begin
          Result := True;
          gDebug(debug + ' found');
          Exit;
        End;
      End;

      MiddleTPAEx(ATPA[i], x, y);
      gDebug('TPA Length: ' + ToStr(Length(ATPA[i])));
      If (PaintDebug) Then
        SMART_DrawDotsEx(True, ATPA[i], clBlue);

      If Random(2)=1 then
        MMouse(x, y, -7, 8) else
      MissMouse(x, y);

      If WaitUpText('anner', 150) Then
      Begin
        Result := True;
        gDebug(debug + ' found');
        Exit;
      End;

      If (i > high(ATPA)-1) Then
      Begin
        gDebug('TPAMainScreen: TimedOut');
        Result := False;
        Continue;
      End;
    End;
  End;
   gDebug('Tanner Color not found...');
   MakeCompass('S');
End;

//******************************************************************************
//  If rr = 5 or 15 out of a ranDom 20 perForms the AntiBan Procedure
//******************************************************************************
Procedure Antiban;
Var
  i, x, y : Integer;
Begin
If Not LoggedIn Then Exit;
FindNormalRandoms;
GTr := RandomRange(21 ,37);
gDebug('Performing AntiBan');
  Begin
    Case Random(11) Of
      0..3 :
         For i := 0 To 1 Do
         Begin
          GetMousePos(x, y);

          If Random(2)=1 then
            MMouse(x+RandomRange(-300, 300), y+RandomRange(-300, 300), 0, 0) else
          MissMouse(x, y);

          Wait(300+Random(450));
         End;
      4..6 : GameTab(GTr);
      7..11 : PickUpMouse;
    End;
  End;
End;

//******************************************************************************
//  Finds the tanner using TPA/ATPAs
//******************************************************************************
Function FindTanner : Boolean;
Var
  j, x, y : Integer;
Begin
  Result := False;

  For j := 0 To 20 Do
  Begin
    If Not LoggedIn Then
      Exit;
    FindNormalRandoms;

    While IsMoving Do
      Wait(10+Random(20));

    If CheckTScreen Then
    Begin
      gDebug('TannerScreen: ' + ToStr(CheckTScreen));
      Result := True;
      Break;
    End;

    If TPAFindTanner(x, y, PLoc.W[1], PLoc.H[1], PLoc.Col[1], PLoc.Tol[1], PLoc.Hue[1], PLoc.Sat[1], PLoc.UpText[1], 'Tanner') Then
    Begin
      GetMousePos(x, y);
      Mouse(x, y, 0, 0, False); FindTanner
      ChooseOption(PLoc.Option);
      Wait(250+Random(450));

      if Random(2)=1 then
        MouseBox(520, 6, 758, 497, MOUSE_MOVE) else
      MouseBox(MCX1, MCY1, MCX2, MCY2, MOUSE_MOVE);

      Result := WaitFunc(@CheckTScreen, 100, 1200);

      If Result Then
      Begin
        ClearOSDebug;
        gDebug('TannerScreen: ' + ToStr(CheckTScreen));
        Exit;
      End Else
      Begin
        gDebug('TannerScreen: ' + ToStr(CheckTScreen));
        If IsChatBoxTextBetween('t reach that', clBlack, 5, 8) Then
        Begin
          gDebug('Tanner door is closed, switching worlds.');
          SwitchWorld;
          SetupWalking('PLACE_TANNER');
          SPS_WalkToPos(WTA.pts[High(WTA.pts)]);
        End;
      End;
    End;
   gDebug('[' + ToStr(j) + '] Failed To find Tanner');
   Wait(50+Random(75));
  End;
  If j > 19 Then
  Begin
    EndPlayer('Failed To find Tanner');
    Exit;
  End;
End;

//******************************************************************************
//  Custom DTM Finding, with added Variables.
//******************************************************************************
Function FindDDTMEx(ItemName : String; Section : TIntegerArray; Hover : Boolean): Boolean;
Var
  x, y, TheDTM  : Integer;
  CenterPt : TPoint;
Begin
  Try
    CreateDTM(ItemName);
    TheDTM := AddDTM(MasterTDTM);
    SetDTMName(TheDTM, ItemName);

    If Not LoggedIn Then
      Exit;
    FindNormalRandoms;
    If FindDTMRotated(TheDTM, x, y, Section[0], Section[1], Section[2], Section[3], -PI*2, PI*2, 0.15, WhichAngle) Then
    Begin
      If Not LoggedIn Then
        Exit;
      FindNormalRandoms;
      CenterPt := Point(x, y);

      If PaintDebug Then
        SMART_DrawCircle(True, CenterPt, 8, False, clYellow);

      If Not Hover Then
      Begin
        Result := True;
        Exit;
      End;

      If Random(2)=1 then
        MMouse(x + RandomRange(-5, 8), y  + RandomRange(-8, 8), 0, 0) else
      MissMouse(x, y);

      gDebug('UpText: ' + GetUpText);
      gDebug('Item.text: ' + ToStr(Item.Uptext));
      If WaitUptextMulti(Item.UpText, 750) Then
      Begin
        gDebug('Found DTM: [''' + ItemName + ''']');
        Result := True;
        Exit;
      End;
    End;
  Finally
    FreeDTM(TheDTM);
  End;
End;

//******************************************************************************
//  Counts hte ammount in invenTory for accurate stats tracking
//******************************************************************************
Function CountItemInInv : Integer;
Var
  i, g : Integer;
Begin
  For i := 1 To 28 Do
  Begin
    If ExistsItem(i) Then
      Inc(g);
  End;

  Result := g;
  gDebug('CountInv: ' + ToStr(Result));
End;

//******************************************************************************
//  Places the oreder based on what the user defined for Strings[0]
//******************************************************************************
Procedure PlaceOrder(WhatToTan : String);
Var
  i, x, y  : Integer;
Begin
  For i := 0 To 5 Do
  Begin
    If Not LoggedIn Then
      Exit;
    FindNormalRandoms;
    If (CheckTScreen) Then
    Begin
      MouseBox(Item.BoxCoords[0], Item.BoxCoords[1], Item.BoxCoords[2], Item.BoxCoords[3], 3);
      GetMousePos(x, y);
      Mouse(x, y, 0, 0, False);
      ChooseOption('All');
      Wait(700+Random(300));
      if PinScreen then
        InPin(Players[CurrentPlayer].Pin);
      If IsChatBoxTextBetween('got enough money', clBlack, 5, 8)  Then
      Begin
        EndPlayer('Out of money');
        Exit;
      End;
      If IsChatBoxTextBetween('t have any', clBlack, 5, 8) or (Not CheckTScreen) Then
      Begin
        gDebug('Order Placed');
        Cur_Tan := CountItemInInv;
        Exit;
      End;
    End;
   gDebug('Failed To place an order');
  End;
End;

//******************************************************************************
//  Checks the position of the player by, checking points near the destination.
//******************************************************************************
Function CheckPos(area : String): Boolean;
Var
  tb: TBox;
  MyPos, P2MM, D2MM : TPoint;
  i, g, Dist : Integer;
Begin
  SetupWalking(area);
  ClearOSDebug;
  Result := False;

  For i := 0 To High(WTA.vpts) Do
  Begin
   If Not LoggedIn Then
    Exit;
   FindNormalRandoms;
    If (SPS_PosOnMM(WTA.vpts[i])) Then
    Begin
      MyPos := SPS_GetMyPos;
      P2MM := SPS_PosToMM(MyPos);
      D2MM := SPS_PosToMM(WTA.vpts[i]);
      tb.x1 := D2MM.x-2; tb.x2 := D2MM.x+2;
      tb.y1 := D2MM.y+2; tb.y2 := D2MM.y-2;
      Dist := Distance(P2MM.x, P2MM.y, D2MM.x, D2MM.y);
      If (PaintDebug) Then SMART_DrawBoxEx(False, tb, WTA.BoxCol);
      gDebug('[' + ToStr(g) + '] DistToPt' + ToStr(WTA.vpts[i]) + ' = ' + ToStr(Dist));
      If Dist > 600 Then
        Exit;
      If (Dist > 0) and (Dist < WTA.Dist) Then
      Begin
        Result := g > 0;

        If Result Then
        Begin
          gDebug('DistToPts: Good');
          gDebug('Player''s Location: ' + WTA.PathName);
          Players[CurrentPlayer].Loc := WTA.PathName;
          Exit;
        End;
       inc(g);
      End;
    End;
  End;
End;

//******************************************************************************
//  Check for the flag on the minimap when WebWalking
//******************************************************************************
Function NoFlag: Boolean;
Begin
  If Not LoggedIn Then Exit;
  FindNormalRandoms;

  Result := FFlag(20);

  If Result Then
    Exit;

  If GetSystemTime-TD > 35000 Then
  Begin
    gDebug('[TimedOut] NoFlag > 35s; Force Exit');
    Result := True;
    Exit;
  End;
End;

//******************************************************************************
//  Walks To the place and checks position using SPS
//******************************************************************************
Function WalkToPlace(area : String) : Boolean;
Var
  CenterPt : TPoint;
  db : TPoint;
  i, T, RX, RY : Integer;
  iWTA : TPointArray;
Begin
  SetupWalking(area);
  Result := False;

  If CheckPos(area) Then
  Begin
    Result := True;
    Exit;
  End;

  For T := 0 To 7 Do
  Begin

    iWTA := WTA.Pts;
    gDebug('[' + ToStr(T) + '] WalkTo' + WTA.PathName);
    MarkTime(TD);

    For i := 0 To High(WTA.pts) Do
    Begin
      If Not LoggedIn Then
        Exit;
      FindNormalRandoms;

      RX := RandomRange(-2, 2);
      RY := RandomRange(-1, 1);
      db := SPS_PosToMM(iWTA[i]);
      CenterPt := Point(db.x, db.y);

      gDebug('WalkToPt' + ToStr(iWTA[i]));

      If SPS_PosOnMM(Point(iWTA[i].x + RX, iWTA[i].y + RY)) Then
      Begin

        FindNormalRandoms;

        gDebug('[' + ToStr(i) + ']: MMPoint(' + ToStr(db.x) + ' + ' + ToStr(RX) + ', ' + ToStr(db.y) + ' + ' + ToStr(RY) + ')');

        Mouse(db.x + RX, db.y + RY, 0, 0, True);
        Wait(50+Random(75));

        While Not (NoFlag) Do
        Begin
          If Not LoggedIn Then
            Exit;
          FindNormalRandoms;
          WaitFunc(@NoFlag, 100, 45000);
        End;

        If i > High(WTA.pts)-1 Then
        Begin
          While IsMoving Do
            Wait(10+Random(20));

          Result := CheckPos(area);

          If Result Then
            Exit;
        End;

      End else
        gDebug('[' + ToStr(T) + '][' + ToStr(i) + ']PosNotOnMM' + ToStr(iWTA[i]));
    End;

    If (T > 0) and (WTA.PathName = 'Bank') Then
    Begin
      If (CheckPos(WalkVar[1])) and (Players[CurrentPlayer].Strings[1] = 'LOC_V') Then
      Begin
        SwitchWorld;
        SetupWalking(area);
      End;
     Exit;
    End;
  End;

  If T > 6 Then
  Begin
    EndPlayer('Failed To walk To ' + ToStr(WTA.PathName));
    Exit;
  End;
End;


//******************************************************************************
//  Commits the stats
//******************************************************************************
Procedure CommitZeStats;
Begin
  SetupItem(Players[CurrentPlayer].Strings[0]);
  Writeln('    Sending your stats to Mars.');
  stats_IncVariable('Times Banked', STATS_BNK);
  stats_IncVariable('Loads Done', STATS_BNK);
  stats_IncVariable(Item.STATS_NAME, STATS_TND);

  Stats_Commit;
  SetupItem(Item.Orig);
  STATS_TND := 0;
  STATS_BNK := 0;
  MarkTime(CT);
End;

//******************************************************************************
//  Prints out a detailed progress report.
//******************************************************************************
Procedure ProgressReport;
Var
 i : Integer;
 xpHour, xpHr : Extended;
Begin

  HideTanned := HideTanned + Cur_Tan;
  STATS_TND := STATS_TND + Cur_Tan;
  Players[CurrentPlayer].Integers[1] := Players[CurrentPlayer].Integers[1] + Cur_Tan;
  xpHour := TimeFromMark(TR) div 60000;
  xpHr := XpHour div 60;


 If TimeFromMark(T2ClearDebug) > 180000 Then
 Begin
   ClearDebug;
   MarkTime(T2ClearDebug);
 End;
 SRLRandomsReport;
 Writeln('|---------------------------------------------|');
 Writeln('|               Varrock gTanner               |');
 Writeln('|           v0.1.5 | Created by Geo           |');
 Writeln('|---------------------------------------------|');
 Writeln('  Current Player: ' + Players[CurrentPlayer].Name);

 Writeln('  Tanning: ' + Item.Name);
 Writeln('  -------------------------------------------  ');
 Writeln('  Running for ' + TimeRunning);
 If (PlayersActive = 1) or (HowManyPlayers = 1) Then
 Begin
   Writeln('  One Player Active ');
 End Else
 Begin
   Writeln('  Switching in ' + MsToTime(GFT, Time_Formal));
   Writeln('  Times Switched: ' + IntToStr(TimesSwitched));
 End;
 Writeln('  Hides Tanned: ' + GroupDigits(HideTanned, ',') +
         ' | Times Banked: '  + IntToStr(TimesBanked));
 If xpHr > 0 Then
  Writeln('  Hides P/Hr: ' + ToStr(Round(HideTanned div xpHr)));
 Writeln('|---------------------------------------------|');
 Writeln('|                Player Reports               |');
 Writeln('|---------------------------------------------|');
 Writeln('|   Name  |  Loc  |  Active  | Bank |  Hides  |');
 Writeln('|---------------------------------------------|');

  For i := 0 To HowManyPlayers Do
  Begin
    Repeat
      Writeln('  ' + Padr(Players[i].Name, 12) + ': [ '
      + Players[i].Loc + ' | ' + ToStr(Players[i].Active) + ' | ' +
      GroupDigits(Players[i].Integers[0], ',') + ' | ' + ToStr(Players[i].Integers[1]) + ']');
      inc(i);
      If (i = HowManyPlayers) Then
      Begin
        Writeln('|---------------------------------------------|');
        If (TimeFromMark(CT) >= 360000) Then
          CommitZeStats;
        Writeln('|---------------------------------------------|');
        Exit;
      End;
    Until(i = HowManyPlayers);
  End;
End;


Function FindBankerNew : Boolean;
Var
  CTS, i, j, T: Integer;
  TPA, MMDots: TPointArray;
  ATPA: T2DPointArray;
  MsPt : TPoint;
  FindBox : TBox;
Begin
  MMDots := GetMMDotsOnMS('yellow');

  For T := 0 to 8 do
  Begin
    if i > 1 then
    Begin
      If Not CheckPos(WalkVar[0]) Then
        WalkToPlace(WalkVar[0]);
     MakeCompass(RandomRange(-15, -75));
    End;
    if i = 5 then
    Begin
      gDebug('[Failsafe#T>6] Using SRL OpenBank.');
      OpenBank('vwb', true, false);
      Continue;
    End;
    For i := 0 to High(MMDots) do
    Begin
      MSPt := MMtoMS(MMDots[i]);
      if i < 2 then
        FindBox := IntToBox(MSPt.x-15, MSPt.y-30, MSPt.x+15, MSPt.y+30) else
      FindBox := IntToBox(MSX1, MSY1, MSX2, MSY2);

      SMART_DrawBoxEx(False, FindBox, clYellow);

      CTS := GetColorToleranceSpeed;
      ColorToleranceSpeed(2);
      SetColorSpeed2Modifiers(0.10, 0.22);
      ColorToleranceSpeed(CTS);
      if FindColorsSpiralTolerance(MSPt.x, MSPt.y, TPA, 2836301, FindBox.x1, FindBox.y1, FindBox.x2, FindBox.y2, 5) then
      Begin
        SetColorSpeed2ModIfiers(0.2, 0.2);
        ATPA := TPAToATPAEx(TPA, 5, 5);

        For i := 0 to High(ATPA) do
        Begin

        If Random(2)=1 then
         MMouse(MSPt.x, MSPt.y, -4, 5) else
        MissMouse(MSPt.x, MSPt.y);

          If (PaintDebug) Then
          Begin
            For j := 0 to High(ATPA) do
              If j = i then
                SMART_DrawDotsEx(False, ATPA[j], clLime) else
              SMART_DrawDotsEx(False, ATPA[j], clRed)
          End;

          if WaitUpTextMulti(['alk-to', 'anker'], 550) then
          Begin
            gDebug('Uptext: ' + GetUptext);
            Result := True;
            gDebug('Bank found');
            ClickMouse2(False);
            ChooseOption('ank Banker');
            If WaitFunc(@BankScreen, 500, 4500+Random(1000)) or (PinScreen) Then
            Begin
              If (PinScreen) Then
              Begin
                gDebug('PinScreen: True');
                InPin(Players[CurrentPlayer].Pin);
              End;
              gDebug('BankScreen: True');
              Result := True;
              Exit;
            End;
            gDebug('[' + ToStr(i) + '] BankScreen not visible');
            Result := False;
          End;
        End;
      End;
      gDebug('[' + ToStr(i) + '] Failed To Find Bank');
    End;
  End;
  If (i > 7) Then
  Begin
   EndPlayer('Failed To Find Bank');
   Exit;
  End;
End;

//**********************GetTickCount********************************************************
//  Finds the bank using TPA/ATPA method.
//******************************************************************************
Function FindOpenBank : Boolean;
Var
  i, x, y  : Integer;
Begin
  If Not LoggedIn Then Exit;
  FindNormalRandoms;

  For i := 0 To 10 Do
  Begin
    ClearOSDebug;
    If BankScreen Then
      Exit;
    If (PinScreen) Then
    Begin
      gDebug('PinScreen: True');
      If Players[CurrentPlayer].Pin = '' Then
      Begin
        gDebug('Players[CurrentPlayer].Pin not set, terminating script.');
        TerminateScript;
      End Else
      InPin(Players[CurrentPlayer].Pin);
      Break;
    End;
    If i = 1 Then
    Begin
      If Not CheckPos(WalkVar[0]) Then
        WalkToPlace(WalkVar[0]);
      MakeCompass(RandomRange(-15, -75));
    End;
    If i > 6 Then
    Begin
      gDebug('[Failsafe#T>6] Using SRL OpenBank.');
      OpenBank('vwb', true, false);
      Continue;
    End;
    If Not LoggedIn Then Exit;
    FindNormalRandoms;
    If TPAMainScreen(x, y, PLoc.H[0], PLoc.W[0], PLoc.Col[0], PLoc.Tol[0], PLoc.Hue[0], PLoc.Sat[0], PLoc.UpText[0], 'Bank') Then
    Begin
      ClickMouse2(True);
      If WaitFunc(@BankScreen, 500, 4500+Random(1000)) or (PinScreen) Then
      Begin
        If (PinScreen) Then
        Begin
          gDebug('PinScreen: True');
          InPin(Players[CurrentPlayer].Pin);
        End;
        gDebug('BankScreen: True');
        Result := True;
        Exit;
      End;
     gDebug('[' + ToStr(i) + '] BankScreen not visible');
     Result := False;
    End;
   gDebug('[' + ToStr(i) + '] Failed To Find Bank');
  End;
  If (i > 9) Then
  Begin
    EndPlayer('Failed To Find Bank');
    Exit;
  End;
End;

//******************************************************************************
//  Withdraws an item based on the Var 'ItemName'.
//******************************************************************************
Function ItemWithdraw(ItemName : String) : Boolean;
Var
  x, y  : Integer;
Begin
  If Not LoggedIn Then Exit;
  FindNormalRandoms;

  If BankScreen Then
  Begin
    If ItemName = Item.sName Then
    Begin
      GetMousePos(x, y);
      Mouse(x, y, 0, 0, False);
      ChooseOption('ithdraw-All');
      gDebug('Withdrawing ' + Item.Name);
      Wait(100+Random(245));
      if Random(2)=1 then
        MouseBox(520, 6, 758, 497, MOUSE_MOVE) else
      MouseBox(MCX1, MCY1, MCX2, MCY2, MOUSE_MOVE);
      ClearOSDebug;
      WaitFunc(@InvFull, 100, 7700);

      Result := InvFull

      If Result Then
      Begin
        gDebug(Item.Name + ' Withdrawn');
        SetRun(True);
        Exit;
      End;
    End;
  End;
End;

//******************************************************************************
//  Checks If the necessary equipment exists If not Then Ends the player.
//******************************************************************************
Function CheckEquipment : Boolean;
Var
  i : Integer;
Begin
  If Not LoggedIn Then
    Exit;
  FindNormalRandoms;
  Result := False;

  //While isMoving Do
    //Wait(10+Random(20));

  If FindOpenBank or BankScreen Then
  Begin
    If (InvCount > 0) Then
    Begin
      DepositAll;
      Inc(Players[CurrentPlayer].Integers[0]);
      Inc(TimesBanked);
      Inc(STATS_BNK);
      ProgressReport;
      If (SwitchTime) Then
      Begin
        SwitchAConvert := SwitchA * 60000 + RandomRange(-300000, 300000);
        SwitchPlayer;
        Exit;
      End;
    End;

    For i := 0 To 10 Do
    Begin
      If Not BankScreen then
        Exit;
      If i > 0 Then
        MakeCompass('E');
      If FindDDTMEx(Item.sName, MBX, True) Then
      Begin
        gDebug('We have ' + Item.Name);
        Result := ItemWithdraw(Item.sName);
        Exit;
      End;
      gDebug('DTM Not Found: [''' + Item.sName + ''']');
    End;
    If i > 9 Then
    Begin
      EndPlayer('Failed To Find: [''' + Item.sName + ''']');
      Exit;
    End;
  End;
End;

//******************************************************************************
//  Brings the script Together so the magic can Begin.
//******************************************************************************
Procedure MainLoop;
Begin
  Repeat
    Case Players[CurrentPlayer].Loc Of
     'Bank':
       Begin
         MouseSpeed := RandomRange(15, 20);
         If InvEmpty Then
           If Not CheckEquipment Then
             Continue;
         gDebug('Tanning Process: Begin;');
         If WalkToPlace(WalkVar[1]) Then
         Begin
           Players[CurrentPlayer].Loc := 'Tanner';
           If FindTanner Then
             PlaceOrder(Players[CurrentPlayer].Strings[0]);
         End;
       End;
     'Tanner':
       Begin
         gDebug('Banking Process: Begin;');
         If WalkToPlace(WalkVar[0]) Then
           CheckEquipment;
       End;
    End;
  Until(AllPlayersInactive);
End;

Begin
  SMART_server := 20;
  SMART_members := False;
  SMART_signed := False;
  SMART_superDetail := False;
  Wait(500);

  SetupSRL;
  DeclarePlayers;
  ActivateClient;
  MarkTime(t);
  MarkTime(TR);
  MarkTime(CT);
  MarkTime(T2ClearDebug);
  If Not LoggedIn Then
    SwitchWorld;

  SetAngle(SRL_ANGLE_HIGH);

  ClearOSDebug;
  SPS_Debug := False;
  MBX := [MBX1, MBY1, MBX2, MBY2];
  MIX := [MIX1, MIY1, MIX2, MIY2];
  MMX := [MMX1, MMY1, MMX2, MMY2];
  SPS_Setup(RUNESCAPE_SURFACE, ['11_6', '11_7']);
  SwitchAConvert := SwitchA * 60000 + RandomRange(-300000, 300000);
  SetupLocation(Players[CurrentPlayer].Strings[1]);
  SetupItem(Players[CurrentPlayer].Strings[0]);
  SetupItem(Item.Orig);
  WalkVar := DeclareLoc;

  If (SRLStats_Username = '') Then
    SetupSRLStats(280, 'Anonymous', 'anon1337')
  Else
    SetupSRLStats(280, SRLStats_Username, SRLStats_Password);

  MainLoop;
  //Writeln(ToStr(SPS_GetMyPos));
End.
